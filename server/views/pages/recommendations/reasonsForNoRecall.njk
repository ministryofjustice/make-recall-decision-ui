{% extends "../../partials/layout.njk" %}

{% set pageTitle = makePageTitle({ pageHeading: pageTitles[page.id], hasErrors: errors }) %}

{% block beforeContent %}
    {{ backLink() }}
{% endblock %}

{% block content %}
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds-from-desktop">
            {% include '../../partials/error-summary.njk' %}
            <form novalidate method="post">
                <input type="hidden" name="_csrf" value="{{ csrfToken }}" />


                <h1 class='govuk-heading-l'>Why do you think {{ recommendation.personOnProbation.name }} should not be recalled?</h1>
                <p class='govuk-body'>These answers will go into the decision not to recall letter. Make sure you use ‘I’ and ‘you’ in your answers.  Write in plain English.  Use short sentences.</p>
                {{ govukTextarea({
                    name: "licenceBreach",
                    id: "licenceBreach",
                    label: {
                        text: "Tell " + recommendation.personOnProbation.name + " why the licence breach is a problem",
                        classes: "govuk-label--m"
                    },
                    hint: {
                        text: "You must say what behaviour made you consider recall."
                    },
                    value: inputDisplayValues.licenceBreach,
                    errorMessage: errorMessage(errors.licenceBreach)
                }) }}
                {{ govukTextarea({
                    name: "noRecallRationale",
                    id: "noRecallRationale",
                    label: {
                        text: "Tell " + recommendation.personOnProbation.name + " why you've made this decision",
                        classes: "govuk-label--m"
                    },
                    hint: {
                        text: "Explain why they are not being recalled. Say why you think the risk can be managed in the community."
                    },
                    value: inputDisplayValues.noRecallRationale,
                    errorMessage: errorMessage(errors.noRecallRationale)
                }) }}
                {{ govukTextarea({
                    name: "popProgressMade",
                    id: "popProgressMade",
                    label: {
                        text: "Remind " + recommendation.personOnProbation.name + " about their progress so far",
                        classes: "govuk-label--m"
                    },
                    hint: {
                        text: "Include good behaviour. Say if the breach is unusual or part of a pattern."
                    },
                    value: inputDisplayValues.popProgressMade,
                    errorMessage: errorMessage(errors.popProgressMade)
                }) }}
                {{ govukTextarea({
                    name: "popThoughts",
                    id: "popThoughts",
                    label: {
                        text: "Write down what " + recommendation.personOnProbation.name + " thinks about the licence breach (optional)",
                        classes: "govuk-label--m"
                    },
                    hint: {
                        text: "This helps show that " + recommendation.personOnProbation.name + " has been listened to."
                    },
                    value: inputDisplayValues.popThoughts,
                    errorMessage: errorMessage(errors.popThoughts)
                }) }}
                {{ govukTextarea({
                    name: "futureExpectations",
                    id: "futureExpectations",
                    label: {
                        text: "Tell " + recommendation.personOnProbation.name + " what you've agreed for the future",
                        classes: "govuk-label--m"
                    },
                    hint: {
                        text: "List the actions for " + recommendation.personOnProbation.name + " and the actions for the probation practitioner.  Include any licence variations and say why they are needed."
                    },
                    value: inputDisplayValues.futureExpectations,
                    errorMessage: errorMessage(errors.futureExpectations)
                }) }}
                {{ formSubmitButton() }}
            </form>
        </div>
    </div>
{% endblock %}


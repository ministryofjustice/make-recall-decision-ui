<div class="flex__item-one-third-desktop">
    {%- set filterOptionsHtml %}
        {% for searchFilters in caseSummary.filters.searchFilters.selected %}
            <input type='hidden' name='searchFilters' value='{{ searchFilters.text }}' />
        {% endfor %}
        {{ govukInput({
            label: {
                text: "Search term",
                classes: "govuk-label--s"
            },
            hint: {
                text: 'For example, MAPPA'
            },
            id: "searchFilters",
            name: "searchFilters",
            type: 'search',
            value: errors.searchFilters.values if errors.searchFilters else undefined,
            errorMessage: errorMessage(errors.searchFilters)
        }) }}
        {{ govukDateInput({
            id: "dateFrom",
            namePrefix: "dateFrom",
            fieldset: {
                legend: {
                    html: "Date range<span class='govuk-visually-hidden'> From</span>",
                    classes: "govuk-fieldset__legend--s"
                }
            },
            items: dateTimeItems("dateFrom", caseSummary.filters.dateRange.dateFrom),
            errorMessage: errorMessage(errors.dateFrom)
        }) }}
        {{ govukDateInput({
            id: "dateTo",
            namePrefix: "dateTo",
            fieldset: {
                legend: {
                    html: "<span class='govuk-visually-hidden'>Date range </span>To",
                    classes: "govuk-fieldset__legend--s"
                }
            },
            items: dateTimeItems("dateTo", caseSummary.filters.dateRange.dateTo),
            errorMessage: errorMessage(errors.dateTo)
        }) }}
            <fieldset class="govuk-fieldset govuk-!-margin-top-6">
                <legend class='govuk-fieldset__legend govuk-fieldset__legend--s'>Contact types</legend>
                {% for group in caseSummary.filters.contactTypes.contactTypeGroups %}
                    <details class='collapsible govuk-!-margin-bottom-2'
                             data-module="govuk-details" {{ "open" if group.isGroupOpen }}>
                        <summary class="govuk-body">
                            {{ group.label }} <span class="text-secondary">(<span
                                        data-qa='group-contact-count'>{{ group.contactCountInGroup }}</span>)</span>
                        </summary>
                        <div>
                            {{ govukCheckboxes({
                                idPrefix: "contactTypes-" + group.groupId,
                                name: "contactTypes",
                                classes: "govuk-checkboxes--small",
                                fieldset: {
                                    legend: {
                                        text: group.label,
                                        classes: "govuk-visually-hidden"
                                    }
                                },
                                items: radioCheckboxItems({ items: group.contactTypeCodes, currentValues: caseSummary.filters.contactTypes.selectedIds })
                            }) }}
                        </div>
                    </details>
                {% endfor %}
            </fieldset>
    {% endset -%}
    <div class='govuk-!-margin-bottom-4'>
        <form data-js='contactTypeFiltersForm' novalidate>
            {{ mojFilter({
                heading: {
                    text: 'Filter'
                },
                selectedFilters: {
                    heading: {
                        text: 'Selected filters'
                    },
                    clearLink: {
                        text: 'Clear filters',
                        href: urlInfo.path
                    },
                    categories: removeUndefinedListItems([
                        {
                            heading: {
                            text: 'Search term'
                        },
                            items: selectedFilterItems({ items: caseSummary.filters.searchFilters.selected, urlInfo: urlInfo })
                        } if caseSummary.filters.searchFilters.selected.length else undefined,
                        {
                            heading: {
                            text: 'Date range'
                        },
                            items: selectedFilterItems({ items: caseSummary.filters.dateRange.selected, urlInfo: urlInfo })
                        } if caseSummary.filters.dateRange.selected.length else undefined,
                        {
                            heading: {
                            text: 'Contact type'
                        },
                            items: selectedFilterItems({ items: caseSummary.filters.contactTypes.selected, urlInfo: urlInfo })
                        } if caseSummary.filters.contactTypes.selected.length else undefined
                    ])
                } if caseSummary.hasActiveFilters else undefined,
                optionsHtml: filterOptionsHtml
            }) }}
        </form>
    </div>
</div>

